name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      REPOSITORY: ${{ secrets.REPOSITORY }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: connect
        run: |
          mkdir -p $HOME/runner
          cd $HOME/runner
          curl -o actions-runner-linux-x64-2.317.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.317.0/actions-runner-linux-x64-2.317.0.tar.gz
          echo "9e883d210df8c6028aff475475a457d380353f9d01877d51cc01a17b2a91161d  actions-runner-linux-x64-2.317.0.tar.gz" | shasum -a 256 -c
          tar xzf ./actions-runner-linux-x64-2.317.0.tar.gz
      - name: run
        run: |
          REG_TOKEN=$(curl -X POST -H "Authorization: token ${ACCESS_TOKEN}" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${REPOSITORY}/actions/runners/registration-token | jq .token --raw-output)
          cd /home/runner/runner
          
          ./config.sh --unattended --url https://github.com/${REPOSITORY} --token ${REG_TOKEN}
          
          cleanup() {
            echo "Removing runner..."
            ./config.sh remove --token ${REG_TOKEN}
          }
          
          trap cleanup EXIT SIGINT SIGTERM
          
          ./run.sh
build:
  runs-on: self-hosted
  steps:
    - uses: actions/checkout@v2
    - name: Install Sysbench
      run: |
        sudo apt-get update && sudo apt-get install -y sysbench
        sysbench cpu run | tee cpu_benchmark.txt
        CORES=$(nproc)
        echo "Running CPU benchmark on $CORES cores..."
    - name: 'test mnt'
      run: |
        export ROOTFS=/tmp/restore
        mkdir -p ${ROOTFS}/proc && \
        mkdir -p ${ROOTFS}/dev && \
        mkdir -p ${ROOTFS}/dev/pts && \
        mkdir -p ${ROOTFS}/sys && \
        mkdir -p ${ROOTFS}/run && \
        sudo mount --bind /dev ${ROOTFS}/dev && \
        sudo mount --bind /sys ${ROOTFS}/sys && \
        sudo mount --bind /run ${ROOTFS}/run && \
        sudo mount -t devpts devpts ${ROOTFS}/dev/pts && \
        mkdir -p ${ROOTFS}/home/eggs/.overlay && \
        sudo mount -t tmpfs tmpfs ${ROOTFS}/home/eggs/.overlay/ && \
        mkdir -p ${ROOTFS}/home/eggs/.overlay/{upperdir,workdir} && \
        mkdir -p ${ROOTFS}/home/eggs/.mnt/filesystem.squashfs/var && \
        mkdir -p ${ROOTFS}/home/eggs/.overlay/lowerdir/var && \
        mkdir -p ${ROOTFS}/home/eggs/.overlay/upperdir/var && \
        mkdir -p ${ROOTFS}/home/eggs/.overlay/workdir/var && \
        sudo mount -t overlay overlay -o lowerdir=${ROOTFS}/home/eggs/.overlay/lowerdir/var,upperdir=${ROOTFS}/home/eggs/.overlay/upperdir/var,workdir=${ROOTFS}/home/eggs/.overlay/workdir/var ${ROOTFS}/home/eggs/.mnt/filesystem.squashfs/var || dmesg 
    - name: 'Set up skopeo'
      uses: warjiang/setup-skopeo@v0.1.3
      with:
        version: latest
    - name: 'Sync images'
      run: |
        sudo apt update && sudo apt install -yq vim skopeo libssl-dev libssl3
    - name: 'Sync images'
      run: |
        df -kh
        id
        env
        skopeo --version
        skopeo copy docker://library/ubuntu:24.04 oci:/tmp/image:latest
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
